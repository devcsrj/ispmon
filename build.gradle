plugins {
  id "application"
  id "com.github.johnrengelman.shadow" version "4.0.3"
  id "org.jetbrains.kotlin.jvm" version "1.3.50"
  id "com.moowork.node" version "1.2.0"
  id 'com.palantir.docker' version '0.22.1'
}

repositories {
  mavenCentral()
  mavenLocal()
  maven {
    url = "https://dl.bintray.com/spekframework/spek/"
  }
}

ext {
  junitVersion = "5.3.2"
  kotlinVersion = "1.3.50"
  spekVersion = "2.0.6"
  vertxVersion = "3.8.1"

  mainVerticleName = "com.github.devcsrj.ispmon.Server"
  watchForChange = "src/**/*.kt"
  doOnChange = "${projectDir}/gradlew classes"
}

dependencies {
  implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0")
  implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.9")
  implementation("io.vertx:vertx-core:$vertxVersion")
  implementation("io.vertx:vertx-lang-kotlin:$vertxVersion")

  testImplementation("org.spekframework.spek2:spek-dsl-jvm:$spekVersion")
  testImplementation("io.vertx:vertx-junit5:$vertxVersion")
  testImplementation("io.vertx:vertx-web-client:$vertxVersion")
  testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")

  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
  testRuntimeOnly("org.spekframework.spek2:spek-runner-junit5:$spekVersion")
  testRuntimeOnly("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
}

application {
  mainClassName = "io.vertx.core.Launcher"
}

tasks {
  test {
    useJUnitPlatform() {
      includeEngines("spek2")
    }
  }

  compileKotlin {
    kotlinOptions {
      jvmTarget = "1.8"
    }
  }

  compileTestKotlin {
    kotlinOptions {
      jvmTarget = "1.8"
    }
  }

  run {
    args = ['run', mainVerticleName,
            "--redeploy=$watchForChange",
            "--launcher-class=$mainClassName",
            "--on-redeploy=$doOnChange"]
  }

  shadowJar {
    classifier = 'fat'
    manifest {
      attributes.put("Main-Verticle", mainVerticleName)
    }
    mergeServiceFiles {
      include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
  }

  docker {
    name "devcsrj/ispmon:${version}"
    files shadowJar.outputs.files.singleFile
    buildArgs([
      'VERTICLE_NAME': "$mainVerticleName",
      'VERTICLE_FILE': shadowJar.outputs.files.singleFile.name
    ])
  }

  node {
    version = '8.11.1'
    yarnVersion = '1.12.3'
    download = true
    nodeModulesDir = file("${project.projectDir}/src/main/frontend")
  }

  processResources {
    from('src/main/frontend/dist/') {
      into 'static'
    }
  }

  build.dependsOn yarn_build
}
