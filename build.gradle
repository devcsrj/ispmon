plugins {
  id "application"
  id "com.github.johnrengelman.shadow" version "4.0.3"
  id "org.jetbrains.kotlin.jvm" version "1.3.50"
  id "com.moowork.node" version "1.2.0"
  id "com.github.hierynomus.license" version "0.15.0"
  id 'com.palantir.docker' version '0.22.1'
}

repositories {
  mavenCentral()
  mavenLocal()
  jcenter()
  maven {
    url = "https://dl.bintray.com/spekframework/spek/"
  }
}

version = "1.0.0-SNAPSHOT"
mainClassName = "com.github.devcsrj.ispmon.MainKt"

ext {
  junitVersion = "5.3.2"
  kluentVersion = "1.53"
  kotlinVersion = "1.3.50"
  ktorVersion = "1.2.4"
  spekVersion = "2.0.6"

  watchForChange = "src/**/*.kt"
  doOnChange = "${projectDir}/gradlew classes"
}

dependencies {
  implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
  implementation("io.ktor:ktor-server-netty:$ktorVersion")
  implementation("org.slf4j:slf4j-simple:1.7.28")

  testImplementation("org.spekframework.spek2:spek-dsl-jvm:$spekVersion")
  testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
  testImplementation("org.amshove.kluent:kluent:$kluentVersion")
  testImplementation("com.squareup.okhttp3:mockwebserver:4.1.0")

  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
  testRuntimeOnly("org.spekframework.spek2:spek-runner-junit5:$spekVersion")
  testRuntimeOnly("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
}

tasks {
  test {
    useJUnitPlatform() {
      includeEngines("spek2")
    }
  }

  compileKotlin {
    kotlinOptions {
      jvmTarget = "1.8"
    }
  }

  compileTestKotlin {
    kotlinOptions {
      jvmTarget = "1.8"
    }
  }

  license {
    header rootProject.file('LICENSE')
    mapping("kt", "JAVADOC_STYLE")
    includes([
      "**/*.kt",
      "**/*.java",
      "**/*.jsx"
    ])
    excludes([
      'bin/**',
      '**/*.properties',
      '**/META-INF/**'
    ])
  }

  shadowJar {
    manifest {
      attributes 'Main-Class': mainClassName
    }
  }

  node {
    version = '8.11.1'
    yarnVersion = '1.12.3'
    download = true
    nodeModulesDir = file("${project.projectDir}/src/main/frontend")
  }

  processResources {
    from('src/main/frontend/dist/') {
      into 'static'
    }
  }

  build.dependsOn yarn_build

  docker {
    name "devcsrj/ispmon:${version}"
    files shadowJar.outputs.files.singleFile
    buildArgs([
      'JAR': shadowJar.outputs.files.singleFile.name
    ])
    dependsOn(shadowJar)
  }
}
